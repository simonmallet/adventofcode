<?php

use App\AdventDay2;

class AdventDay2Test extends TestCase
{
    public function testOpCode()
    {
        $opCode = '1,0,0,0,99';

        $this->assertSame('2,0,0,0,99', AdventDay2::program1202($opCode));
    }

    public function testOpCode2()
    {
        $opCode = '2,3,0,3,99';

        $this->assertSame('2,3,0,6,99', AdventDay2::program1202($opCode));
    }

    public function testOpCode3()
    {
        $opCode = '2,4,4,5,99,0';

        $this->assertSame('2,4,4,5,99,9801', AdventDay2::program1202($opCode));
    }

    public function testOpCode4()
    {
        $opCode = '1,1,1,4,99,5,6,0,99';

        $this->assertSame('30,1,1,4,2,5,6,0,99', AdventDay2::program1202($opCode));
    }

    public function testQuestionOne()
    {
        $opCode = '1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,9,19,1,19,5,23,1,13,23,27,1,27,6,31,2,31,6,35,2,6,35,39,1,39,5,43,1,13,43,47,1,6,47,51,2,13,51,55,1,10,55,59,1,59,5,63,1,10,63,67,1,67,5,71,1,71,10,75,1,9,75,79,2,13,79,83,1,9,83,87,2,87,13,91,1,10,91,95,1,95,9,99,1,13,99,103,2,103,13,107,1,107,10,111,2,10,111,115,1,115,9,119,2,119,6,123,1,5,123,127,1,5,127,131,1,10,131,135,1,135,6,139,1,10,139,143,1,143,6,147,2,147,13,151,1,5,151,155,1,155,5,159,1,159,2,163,1,163,9,0,99,2,14,0,0';

        $this->assertSame(
            '4690667,12,2,2,1,1,2,3,1,3,4,3,1,5,0,3,2,1,9,36,1,19,5,37,1,13,23,42,1,27,6,44,2,31,6,88,2,6,35,176,1,39,5,177,1,13,43,182,1,6,47,184,2,13,51,920,1,10,55,924,1,59,5,925,1,10,63,929,1,67,5,930,1,71,10,934,1,9,75,937,2,13,79,4685,1,9,83,4688,2,87,13,23440,1,10,91,23444,1,95,9,23447,1,13,99,23452,2,103,13,117260,1,107,10,117264,2,10,111,469056,1,115,9,469059,2,119,6,938118,1,5,123,938119,1,5,127,938120,1,10,131,938124,1,135,6,938126,1,10,139,938130,1,143,6,938132,2,147,13,4690660,1,5,151,4690661,1,155,5,4690662,1,159,2,4690664,1,163,9,0,99,2,14,0,0',
            AdventDay2::program1202($opCode)
        );
    }

    /**
     * Output at position must be 19690720. Only by changing numbers at position 1 and 2 between 0 and 99 inclusive
     */
    public function testQuestionTwo()
    {
        $result = "";
        for ($noun = 0; $noun <= 99; $noun++) {
            for ($verb = 0; $verb <= 99; $verb++) {
                $opCode = "1,$noun,$verb,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,9,19,1,19,5,23,1,13,23,27,1,27,6,31,2,31,6,35,2,6,35,39,1,39,5,43,1,13,43,47,1,6,47,51,2,13,51,55,1,10,55,59,1,59,5,63,1,10,63,67,1,67,5,71,1,71,10,75,1,9,75,79,2,13,79,83,1,9,83,87,2,87,13,91,1,10,91,95,1,95,9,99,1,13,99,103,2,103,13,107,1,107,10,111,2,10,111,115,1,115,9,119,2,119,6,123,1,5,123,127,1,5,127,131,1,10,131,135,1,135,6,139,1,10,139,143,1,143,6,147,2,147,13,151,1,5,151,155,1,155,5,159,1,159,2,163,1,163,9,0,99,2,14,0,0";
                $result = AdventDay2::program1202($opCode);
                if (substr($result, 0, strpos($result, ',')) == 19690720) {
                    break 2;
                }
            }
        }

        $this->assertSame(
            "19690720,62,55,2,1,1,2,3,1,3,4,3,1,5,0,3,2,1,9,186,1,19,5,187,1,13,23,192,1,27,6,194,2,31,6,388,2,6,35,776,1,39,5,777,1,13,43,782,1,6,47,784,2,13,51,3920,1,10,55,3924,1,59,5,3925,1,10,63,3929,1,67,5,3930,1,71,10,3934,1,9,75,3937,2,13,79,19685,1,9,83,19688,2,87,13,98440,1,10,91,98444,1,95,9,98447,1,13,99,98452,2,103,13,492260,1,107,10,492264,2,10,111,1969056,1,115,9,1969059,2,119,6,3938118,1,5,123,3938119,1,5,127,3938120,1,10,131,3938124,1,135,6,3938126,1,10,139,3938130,1,143,6,3938132,2,147,13,19690660,1,5,151,19690661,1,155,5,19690662,1,159,2,19690717,1,163,9,0,99,2,14,0,0",
            $result
        );

        // The answer to the question is 100 * noun + verb. No parentheses here!!! Careful. So (100 * 62) + 55.
    }
}
